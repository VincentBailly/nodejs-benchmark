

Sun Sep 04 2022
00:30:10 GMT+0200 (Central European Summer Time)

Scenario: perf measurement
Percentiles:
  - p10: 0.00330
  - p50: 0.00354
  - p90: 0.00551

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:33:50 GMT+0200 (Central European Summer Time)

Scenario: "perf measurement"
Env:
  - loops: 500
Percentiles:
  - p10: 0.00326
  - p50: 0.00355
  - p90: 0.00549

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:37:29 GMT+0200 (Central European Summer Time)

Scenario: "empty function declaration"
Env:
  - loops: 1000
Percentiles:
  - p10: 0.00326
  - p50: 0.00356
  - p90: 0.00546

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    function foo() {}
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:43:24 GMT+0200 (Central European Summer Time)

Scenario: "empty for loop of 1000 iterations"
Env:
  - loops: 1000
Percentiles:
  - p10: 0.0513
  - p50: 0.0529
  - p90: 0.0562

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    for (let i = 0; i < 1000; i++) {}
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:47:58 GMT+0200 (Central European Summer Time)

Scenario: "create 1000 empty objects"
Env:
  - loops: 1000
Percentiles:
  - p10: 0.0635
  - p50: 0.0659
  - p90: 0.0702

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    for (let i = 0; i < 1000; i++) {
        let a = {}
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:49:39 GMT+0200 (Central European Summer Time)

Scenario: "create 10000 empty objects"
Env:
  - loops: 1000
Percentiles:
  - p10: 0.206
  - p50: 0.212
  - p90: 0.222

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    for (let i = 0; i < 10000; i++) {
        let a = {}
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:51:08 GMT+0200 (Central European Summer Time)

Scenario: "create 100000 empty objects"
Env:
  - loops: 1000
Percentiles:
  - p10: 1.38
  - p50: 1.42
  - p90: 1.46

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    for (let i = 0; i < 100000; i++) {
        let a = {}
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:53:09 GMT+0200 (Central European Summer Time)

Scenario: "create 1000000 empty objects"
Env:
  - loops: 1000
Percentiles:
  - p10: 1.98
  - p50: 2.01
  - p90: 2.06

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        let a = {}
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:53:09 GMT+0200 (Central European Summer Time)

Scenario: "create 1000000 empty objects"
Env:
  - loops: 1000
Percentiles:
  - p10: 1.98
  - p50: 2.01
  - p90: 2.06

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        let a = {}
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:54:55 GMT+0200 (Central European Summer Time)

Scenario: "create 10000000 empty objects"
Env:
  - loops: 1000
Percentiles:
  - p10: 7.83
  - p50: 7.88
  - p90: 7.96

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    for (let i = 0; i < 10000000; i++) {
        let a = {}
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
00:58:11 GMT+0200 (Central European Summer Time)

Scenario: "call 1000000 times an empty function"
Env:
  - loops: 1000
Percentiles:
  - p10: 1.51
  - p50: 1.55
  - p90: 1.57

Code:
```
    now = require('perf_hooks').performance.now;
    function noop() {}
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        noop();
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:01:16 GMT+0200 (Central European Summer Time)

Scenario: "create 1 million times the same string"
Env:
  - loops: 1000
Percentiles:
  - p10: 1.35
  - p50: 1.36
  - p90: 1.38

Code:
```
    now = require('perf_hooks').performance.now;
    let str;
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        str = 'hello world';
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:04:23 GMT+0200 (Central European Summer Time)

Scenario: "iterate 1 million times in an empty for-loop"
Env:
  - loops: 1000
Percentiles:
  - p10: 1.35
  - p50: 1.37
  - p90: 1.39

Code:
```
    now = require('perf_hooks').performance.now;
    ti = now();
    for (let i = 0; i < 1000000; i++) {
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:10:21 GMT+0200 (Central European Summer Time)

Scenario: "create 1 million empty arrays"
Env:
  - loops: 1000
Percentiles:
  - p10: 55.2
  - p50: 56.8
  - p90: 57.8

Code:
```
    now = require('perf_hooks').performance.now;
    let arr = []
    // store the result in an array to be sure they are
    // not garbage collected
    // initialize the array to store them so it does not count
    // in the measurement
    for (let i = 0; i < 1000000; i++) {
        arr.push(undefined);
    }
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        arr[i] = []
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:13:34 GMT+0200 (Central European Summer Time)

Scenario: "create 1 million empty objects"
Env:
  - loops: 1000
Percentiles:
  - p10: 66.0
  - p50: 76.2
  - p90: 79.0

Code:
```
    now = require('perf_hooks').performance.now;
    let arr = []
    // store the result in an array to be sure they are
    // not garbage collected
    // initialize the array to store them so it does not count
    // in the measurement
    for (let i = 0; i < 1000000; i++) {
        arr.push(undefined);
    }
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        arr[i] = {}
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:16:11 GMT+0200 (Central European Summer Time)

Scenario: "fill an array with 1 million integers"
Env:
  - loops: 1000
Percentiles:
  - p10: 12.2
  - p50: 12.3
  - p90: 12.5

Code:
```
    now = require('perf_hooks').performance.now;
    let arr = []
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        arr.push(1)
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:21:40 GMT+0200 (Central European Summer Time)

Scenario: "fill a linked-list with 1 million integers"
Env:
  - loops: 1000
Percentiles:
  - p10: 7.41
  - p50: 7.71
  - p90: 8.06

Code:
```
    now = require('perf_hooks').performance.now;
    let arr = { };
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        arr.next = {value : 1}
        arr = arr.next;
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:28:06 GMT+0200 (Central European Summer Time)

Scenario: "assign 1 million times a variable"
Env:
  - loops: 1000
Percentiles:
  - p10: 1.35
  - p50: 1.36
  - p90: 1.38

Code:
```
    now = require('perf_hooks').performance.now;
    let variable;
    ti = now();
    for (let i = 0; i < 1000000; i++) {
        variable = 1;
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:32:07 GMT+0200 (Central European Summer Time)

Scenario: "assign 1 million times a variable with eval()"
Env:
  - loops: 1000
Percentiles:
  - p10: 116
  - p50: 121
  - p90: 125

Code:
```
    now = require('perf_hooks').performance.now;
    let variable;
    ti = now();
    let code = 'variable = 1';
    for (let i = 0; i < 1000000; i++) {
        eval(code);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:35:10 GMT+0200 (Central European Summer Time)

Scenario: "assign 1 million times a variable with a function call"
Env:
  - loops: 1000
Percentiles:
  - p10: 2.03
  - p50: 2.06
  - p90: 2.17

Code:
```
    now = require('perf_hooks').performance.now;
    let variable;
    ti = now();
    let fn = function () {variable = 1 }
    for (let i = 0; i < 1000000; i++) {
        fn();
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:37:26 GMT+0200 (Central European Summer Time)

Scenario: "assign 1 million times a variable with a lambda function call"
Env:
  - loops: 1000
Percentiles:
  - p10: 2.02
  - p50: 2.06
  - p90: 2.17

Code:
```
    now = require('perf_hooks').performance.now;
    let variable;
    ti = now();
    let fn =  () => {variable = 1 }
    for (let i = 0; i < 1000000; i++) {
        fn();
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
```


Sun Sep 04 2022
01:52:29 GMT+0200 (Central European Summer Time)

Scenario: "10000 empty iterations with callbacks"
Env:
  - loops: 1000
Percentiles:
  - p10: 0.338
  - p50: 0.344
  - p90: 0.358

Code:
```
    now = require('perf_hooks').performance.now;
    let i = 0;
    let ti = now();
    function callback() {
        if (++i === 10000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
        } else {
            callback()
        }
    }
    callback();
```


Sun Sep 04 2022
01:55:15 GMT+0200 (Central European Summer Time)

Scenario: "10000 empty iterations with process.nextTick()"
Env:
  - loops: 1000
Percentiles:
  - p10: 10.4
  - p50: 10.6
  - p90: 10.8

Code:
```
    now = require('perf_hooks').performance.now;
    let i = 0;
    let ti = now();
    function callback() {
        if (++i === 10000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
        } else {
            process.nextTick(callback)
        }
    }
    process.nextTick(callback);
```


Sun Sep 04 2022
01:59:29 GMT+0200 (Central European Summer Time)

Scenario: "10000 empty iterations with setImmediate"
Env:
  - loops: 1000
Percentiles:
  - p10: 12.1
  - p50: 12.3
  - p90: 12.6

Code:
```
    now = require('perf_hooks').performance.now;
    let i = 0;
    let ti = now();
    function callback() {
        if (++i === 10000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
        } else {
            setImmediate(callback)
        }
    }
    setImmediate(callback);
```


Sun Sep 04 2022
02:01:42 GMT+0200 (Central European Summer Time)

Scenario: "10000 empty iterations with promise.then()"
Env:
  - loops: 1000
Percentiles:
  - p10: 0.885
  - p50: 0.922
  - p90: 0.972

Code:
```
    now = require('perf_hooks').performance.now;
    let i = 0;
    let ti = now();
    let p = Promise.resolve();
    function callback() {
        if (++i === 10000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
        } else {
            p.then(callback)
        }
    }
    p.then(callback);
```


Sun Sep 04 2022
22:18:13 GMT+0200 (Central European Summer Time)

Scenario: "read 1000 files of size 7Kb serially"
Env:
  - loops: 50
Percentiles:
  - p10: NaN
  - p50: NaN
  - p90: NaN

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSynce('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    for (let i = 0; i < 1000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    ti = now();
    for (let i = 0; i < 1000; i++) {
        fs.readFileSync(`test-files/file-${i}`);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
    fs.rmSync('test-files', { force: true, recursive: true });
```


Sun Sep 04 2022
22:18:39 GMT+0200 (Central European Summer Time)

Scenario: "read 1000 files of size 7Kb serially"
Env:
  - loops: 50
Percentiles:
  - p10: NaN
  - p50: NaN
  - p90: NaN

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSynce('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    for (let i = 0; i < 1000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    ti = now();
    for (let i = 0; i < 1000; i++) {
        fs.readFileSync(`test-files/file-${i}`);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
    fs.rmSync('test-files', { force: true, recursive: true });
```


Sun Sep 04 2022
22:19:37 GMT+0200 (Central European Summer Time)

Scenario: "read 1000 files of size 7Kb serially"
Env:
  - loops: 50
Percentiles:
  - p10: 6.10
  - p50: 6.25
  - p90: 6.51

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    for (let i = 0; i < 1000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    ti = now();
    for (let i = 0; i < 1000; i++) {
        fs.readFileSync(`test-files/file-${i}`);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
    fs.rmSync('test-files', { force: true, recursive: true });
```


Sun Sep 04 2022
22:20:09 GMT+0200 (Central European Summer Time)

Scenario: "read 1000 files of size 7Kb serially"
Env:
  - loops: 150
Percentiles:
  - p10: 6.08
  - p50: 6.22
  - p90: 6.51

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    for (let i = 0; i < 1000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    ti = now();
    for (let i = 0; i < 1000; i++) {
        fs.readFileSync(`test-files/file-${i}`);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
    fs.rmSync('test-files', { force: true, recursive: true });
```


Sun Sep 04 2022
22:27:45 GMT+0200 (Central European Summer Time)

Scenario: "read 100000 files of size 7Kb serially"
Env:
  - loops: 150
Percentiles:
  - p10: 345
  - p50: 350
  - p90: 357

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    for (let i = 0; i < 100000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    ti = now();
    for (let i = 0; i < 100000; i++) {
        fs.readFileSync(`test-files/file-${i}`);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
    fs.rmSync('test-files', { force: true, recursive: true });
```


Sun Sep 04 2022
22:29:05 GMT+0200 (Central European Summer Time)

Scenario: "read 1000 files of size 7Kb async"
Env:
  - loops: 150
Percentiles:
  - p10: 38.1
  - p50: 41.5
  - p90: 48.1

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    for (let i = 0; i < 1000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    let j = 0;
    function done() {
        if ( ++j === 1000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
            fs.rmSync('test-files', { force: true, recursive: true });
        }
    }
    ti = now();
    for (let i = 0; i < 1000; i++) {
        fs.readFile(`test-files/file-${i}`, done);
    }
```


Sun Sep 04 2022
22:33:00 GMT+0200 (Central European Summer Time)

Scenario: "write 1000 files of size 7Kb serially"
Env:
  - loops: 150
Percentiles:
  - p10: 13.1
  - p50: 13.3
  - p90: 13.5

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    ti = now();
    for (let i = 0; i < 1000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
    fs.rmSync('test-files', { force: true, recursive: true });
```


Sun Sep 04 2022
22:35:12 GMT+0200 (Central European Summer Time)

Scenario: "write 1000 files of size 7Kb async"
Env:
  - loops: 150
Percentiles:
  - p10: 43.7
  - p50: 47.5
  - p90: 58.4

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    let j = 0;
    function done() {
        if ( ++j === 1000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
            fs.rmSync('test-files', { force: true, recursive: true });
        }
    }
    ti = now();
    for (let i = 0; i < 1000; i++) {
        fs.writeFile(`test-files/file-${i}`, buff, done);
    }
```


Sun Sep 04 2022
22:37:09 GMT+0200 (Central European Summer Time)

Scenario: "write 10000 files of size 7Kb serially"
Env:
  - loops: 150
Percentiles:
  - p10: 121
  - p50: 122
  - p90: 125

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    ti = now();
    for (let i = 0; i < 10000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
    fs.rmSync('test-files', { force: true, recursive: true });
```


Sun Sep 04 2022
22:38:41 GMT+0200 (Central European Summer Time)

Scenario: "write 10000 files of size 7Kb async"
Env:
  - loops: 150
Percentiles:
  - p10: 117
  - p50: 122
  - p90: 129

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    let j = 0;
    function done() {
        if ( ++j === 10000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
            fs.rmSync('test-files', { force: true, recursive: true });
        }
    }
    ti = now();
    for (let i = 0; i < 10000; i++) {
        fs.writeFile(`test-files/file-${i}`, buff, done);
    }
```


Sun Sep 04 2022
22:46:59 GMT+0200 (Central European Summer Time)

Scenario: "write 100000 files of size 7Kb serially"
Env:
  - loops: 150
Percentiles:
  - p10: 1180
  - p50: 1430
  - p90: 1460

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    ti = now();
    for (let i = 0; i < 100000; i++) {
        fs.writeFileSync(`test-files/file-${i}`, buff);
    }
    tf = now();
    process.stdout.write((tf-ti).toString());
    fs.rmSync('test-files', { force: true, recursive: true });
```


Sun Sep 04 2022
22:48:32 GMT+0200 (Central European Summer Time)

Scenario: "write 100000 files of size 7Kb async"
Env:
  - loops: 150
Percentiles:
  - p10: 382
  - p50: 398
  - p90: 421

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    let j = 0;
    function done() {
        if ( ++j === 100000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
            fs.rmSync('test-files', { force: true, recursive: true });
        }
    }
    ti = now();
    for (let i = 0; i < 100000; i++) {
        fs.writeFile(`test-files/file-${i}`, buff, done);
    }
```


Sun Sep 04 2022
22:59:35 GMT+0200 (Central European Summer Time)

Scenario: "write 100000 files of size 7Kb async with limit of 1000"
Env:
  - loops: 10
Percentiles:
  - p10: 1090
  - p50: 1110
  - p90: 1120

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    let j = 0;
    let started = 0;
    function done() {
        if ( ++j === 100000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
            fs.rmSync('test-files', { force: true, recursive: true });
        } else {
            if (started < 100000 && j - started < 1000) {
                started++;
                fs.writeFile(`test-files/file-${started}`, buff, done);
            }
        }
    }
    ti = now();
    for (let i = 0; i < 1000; i++) {
        started++;
        fs.writeFile(`test-files/file-${i}`, buff, done);
    }
```


Sun Sep 04 2022
23:00:57 GMT+0200 (Central European Summer Time)

Scenario: "write 100000 files of size 7Kb async with limit of 100"
Env:
  - loops: 10
Percentiles:
  - p10: 1010
  - p50: 1020
  - p90: 1030

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    let j = 0;
    let started = 0;
    function done() {
        if ( ++j === 100000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
            fs.rmSync('test-files', { force: true, recursive: true });
        } else {
            if (started < 100000 && j - started < 100) {
                started++;
                fs.writeFile(`test-files/file-${started}`, buff, done);
            }
        }
    }
    ti = now();
    for (let i = 0; i < 100; i++) {
        started++;
        fs.writeFile(`test-files/file-${i}`, buff, done);
    }
```


Sun Sep 04 2022
23:02:19 GMT+0200 (Central European Summer Time)

Scenario: "write 100000 files of size 7Kb async with limit of 10000"
Env:
  - loops: 10
Percentiles:
  - p10: 552
  - p50: 583
  - p90: 592

Code:
```
    now = require('perf_hooks').performance.now;
    fs = require('fs');
    fs.rmSync('test-files', { force: true, recursive: true });
    fs.mkdirSync('test-files');
    const buff = Buffer.allocUnsafe(1024 * 7);
    let j = 0;
    let started = 0;
    function done() {
        if ( ++j === 100000) {
            tf = now();
            process.stdout.write((tf-ti).toString());
            fs.rmSync('test-files', { force: true, recursive: true });
        } else {
            if (started < 100000 && j - started < 10000) {
                started++;
                fs.writeFile(`test-files/file-${started}`, buff, done);
            }
        }
    }
    ti = now();
    for (let i = 0; i < 10000; i++) {
        started++;
        fs.writeFile(`test-files/file-${i}`, buff, done);
    }
```
